// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type partyTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *partyTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("party").
func (v *partyTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *partyTableType) Columns() []string {
	return []string{"party_id", "created_at", "product_type", "pgs1", "pgs2", "pgs3", "pgs4", "temperature_norm", "temperature_minus", "temperature_plus"}
}

// NewStruct makes a new struct for that view or table.
func (v *partyTableType) NewStruct() reform.Struct {
	return new(Party)
}

// NewRecord makes a new record for that table.
func (v *partyTableType) NewRecord() reform.Record {
	return new(Party)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *partyTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// PartyTable represents party view or table in SQL database.
var PartyTable = &partyTableType{
	s: parse.StructInfo{Type: "Party", SQLSchema: "", SQLName: "party", Fields: []parse.FieldInfo{{Name: "PartyID", Type: "int64", Column: "party_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "ProductType", Type: "string", Column: "product_type"}, {Name: "Pgs1", Type: "float64", Column: "pgs1"}, {Name: "Pgs2", Type: "float64", Column: "pgs2"}, {Name: "Pgs3", Type: "float64", Column: "pgs3"}, {Name: "Pgs4", Type: "float64", Column: "pgs4"}, {Name: "TemperatureNorm", Type: "float64", Column: "temperature_norm"}, {Name: "TemperatureMinus", Type: "float64", Column: "temperature_minus"}, {Name: "TemperaturePlus", Type: "float64", Column: "temperature_plus"}}, PKFieldIndex: 0},
	z: new(Party).Values(),
}

// String returns a string representation of this struct or record.
func (s Party) String() string {
	res := make([]string, 10)
	res[0] = "PartyID: " + reform.Inspect(s.PartyID, true)
	res[1] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[2] = "ProductType: " + reform.Inspect(s.ProductType, true)
	res[3] = "Pgs1: " + reform.Inspect(s.Pgs1, true)
	res[4] = "Pgs2: " + reform.Inspect(s.Pgs2, true)
	res[5] = "Pgs3: " + reform.Inspect(s.Pgs3, true)
	res[6] = "Pgs4: " + reform.Inspect(s.Pgs4, true)
	res[7] = "TemperatureNorm: " + reform.Inspect(s.TemperatureNorm, true)
	res[8] = "TemperatureMinus: " + reform.Inspect(s.TemperatureMinus, true)
	res[9] = "TemperaturePlus: " + reform.Inspect(s.TemperaturePlus, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Party) Values() []interface{} {
	return []interface{}{
		s.PartyID,
		s.CreatedAt,
		s.ProductType,
		s.Pgs1,
		s.Pgs2,
		s.Pgs3,
		s.Pgs4,
		s.TemperatureNorm,
		s.TemperatureMinus,
		s.TemperaturePlus,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Party) Pointers() []interface{} {
	return []interface{}{
		&s.PartyID,
		&s.CreatedAt,
		&s.ProductType,
		&s.Pgs1,
		&s.Pgs2,
		&s.Pgs3,
		&s.Pgs4,
		&s.TemperatureNorm,
		&s.TemperatureMinus,
		&s.TemperaturePlus,
	}
}

// View returns View object for that struct.
func (s *Party) View() reform.View {
	return PartyTable
}

// Table returns Table object for that record.
func (s *Party) Table() reform.Table {
	return PartyTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Party) PKValue() interface{} {
	return s.PartyID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Party) PKPointer() interface{} {
	return &s.PartyID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Party) HasPK() bool {
	return s.PartyID != PartyTable.z[PartyTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Party) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.PartyID = int64(i64)
	} else {
		s.PartyID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = PartyTable
	_ reform.Struct = (*Party)(nil)
	_ reform.Table  = PartyTable
	_ reform.Record = (*Party)(nil)
	_ fmt.Stringer  = (*Party)(nil)
)

func init() {
	parse.AssertUpToDate(&PartyTable.s, new(Party))
}
