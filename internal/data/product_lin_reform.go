// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type productLinTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *productLinTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("product_lin").
func (v *productLinTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *productLinTableType) Columns() []string {
	return []string{"product_lin_id", "product_id", "lin_point", "value"}
}

// NewStruct makes a new struct for that view or table.
func (v *productLinTableType) NewStruct() reform.Struct {
	return new(ProductLin)
}

// NewRecord makes a new record for that table.
func (v *productLinTableType) NewRecord() reform.Record {
	return new(ProductLin)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *productLinTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ProductLinTable represents product_lin view or table in SQL database.
var ProductLinTable = &productLinTableType{
	s: parse.StructInfo{Type: "ProductLin", SQLSchema: "", SQLName: "product_lin", Fields: []parse.FieldInfo{{Name: "ProductLinID", Type: "int64", Column: "product_lin_id"}, {Name: "ProductID", Type: "int64", Column: "product_id"}, {Name: "LinPoint", Type: "int64", Column: "lin_point"}, {Name: "Value", Type: "float64", Column: "value"}}, PKFieldIndex: 0},
	z: new(ProductLin).Values(),
}

// String returns a string representation of this struct or record.
func (s ProductLin) String() string {
	res := make([]string, 4)
	res[0] = "ProductLinID: " + reform.Inspect(s.ProductLinID, true)
	res[1] = "ProductID: " + reform.Inspect(s.ProductID, true)
	res[2] = "LinPoint: " + reform.Inspect(s.LinPoint, true)
	res[3] = "Value: " + reform.Inspect(s.Value, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ProductLin) Values() []interface{} {
	return []interface{}{
		s.ProductLinID,
		s.ProductID,
		s.LinPoint,
		s.Value,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ProductLin) Pointers() []interface{} {
	return []interface{}{
		&s.ProductLinID,
		&s.ProductID,
		&s.LinPoint,
		&s.Value,
	}
}

// View returns View object for that struct.
func (s *ProductLin) View() reform.View {
	return ProductLinTable
}

// Table returns Table object for that record.
func (s *ProductLin) Table() reform.Table {
	return ProductLinTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductLin) PKValue() interface{} {
	return s.ProductLinID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductLin) PKPointer() interface{} {
	return &s.ProductLinID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ProductLin) HasPK() bool {
	return s.ProductLinID != ProductLinTable.z[ProductLinTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *ProductLin) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ProductLinID = int64(i64)
	} else {
		s.ProductLinID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = ProductLinTable
	_ reform.Struct = (*ProductLin)(nil)
	_ reform.Table  = ProductLinTable
	_ reform.Record = (*ProductLin)(nil)
	_ fmt.Stringer  = (*ProductLin)(nil)
)

func init() {
	parse.AssertUpToDate(&ProductLinTable.s, new(ProductLin))
}
